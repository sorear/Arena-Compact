Implementation notes for BIBOP
------------------------------

BIBOP uses the "BIg Bag Of Pages" algorithm mentioned in [1] to
efficiently store Perl data.  Each page of memory allocated by
BIBOP is marked with a template of an object; for instance all
objects with double-precision fields x and y blessed into Point
will share one template, and that template owns pages which are
used only to store points.

The upshot of this is that almost no metadata needs to be kept,
in byte terms.  If you have 100 million points in memory, 255
of them will fit on each page, and you will only use 1.6 GB
of memory; each page has 4 bytes to store its owning format
(on a 32-bit system), 255*16 = 4080 bytes of data, and 12 bytes
of slack.

By contrast if the Points were each stored as a blessed HASH
reference, this would require, for each Point, three Perl
values; two numbers, each occupying 24 bytes (16 bytes for the
SV header, 8 for the actual number), and a hash, with a 32 byte
hash table, a 16 byte header, 24 bytes of hash chain entries,
and 20 bytes of metadata, for a grand total of 140 bytes per
Point and 14 GB for the entire set.  Actually, since that's
bigger than 2GB, you need to use a 64-bit perl, which has
8 byte pointers, so 28 GB.

Representation of Nodes
-----------------------

Nodes cannot be Perl objects; the overhead would kill us.  They
are pointers directly into a data block, and have zero or more
fields, as described by the format pointed to by word 0 of the
data block.

Representation of Formats
-------------------------

To allow quick searching, the field names and types are pre-
compressed using an external hash table; the format is then indexed
by the addresses of field structures.  The format is intended to be
binary-searched, not hashed.  Fields and formats are real Perl
objects, to make reification easy; they should not be numerous in
any event.


[1] http://www.iecc.com/gclist/GC-algorithms.html#Jargon
